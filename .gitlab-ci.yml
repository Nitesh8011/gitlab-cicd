variables:
  IMAGE_NAME: nitesh8011/gitlab
  IMAGE_TAG: resources_usage
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

stages:
  - test
  - sonar_scan
  - build

run_tests:
  stage: test
  image: python:3.9-slim-buster
  before_script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r src/requirements.txt
    # - pip install pytest pytest-cov
  script:
    - pytest --cov=src --cov-report=xml
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 day

  # image: python:3.9-slim-buster
  # before_script:
  #   - pip install -r src/requirements.txt && pip install --upgrade Flask pytest
  #   - apt-get update && apt-get -y install make git
  #   - source src/.venv/bin/activate && pytest -v
  # script:
  # - make test

sonar_scanner:
  stage: sonar_scan
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - apt-get update && apt-get install -y wget unzip
    - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
    - unzip sonar-scanner-cli-4.7.0.2747-linux.zip
    - mv sonar-scanner-4.7.0.2747-linux /opt/sonar-scanner
    - export PATH=$PATH:/opt/sonar-scanner/bin
  script:
    - sonar-scanner \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.python.coverage.reportPaths=coverage.xml
  only:
    - merge_requests
    - main
    - feature/stage-added

build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: '/certs'
  before_script:
    - docker login -u $DOCKER_USER -p $DOCKER_TOKEN
  script:
    - docker build . -t $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:$IMAGE_TAG